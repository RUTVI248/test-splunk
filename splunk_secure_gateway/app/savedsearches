[
{
"action.email": "0",
"action.populate_lookup": "0",
"action.rss": "0",
"action.script": "0",
"action.summary_index": "0",
"action.summary_index.force_realtime_schedule": "0",
"alert.digest_mode": "1",
"alert.expires": "24h",
"alert.severity": "3",
"alert.track": "0",
"alert_type": "always",
"allow_skew": "0",
"auto_summarize": "0",
"auto_summarize.command": "| summarize override=partial timespan=$auto_summarize.timespan$ max_summary_size=$auto_summarize.max_summary_size$ max_summary_ratio=$auto_summarize.max_summary_ratio$ max_disabled_buckets=$auto_summarize.max_disabled_buckets$ max_time=$auto_summarize.max_time$ [ $search$ ]",
"auto_summarize.cron_schedule": "*/10 * * * *",
"auto_summarize.dispatch.time_format": "%FT%T.%Q%:z",
"auto_summarize.dispatch.ttl": "60",
"auto_summarize.max_concurrent": "1",
"auto_summarize.max_disabled_buckets": "2",
"auto_summarize.max_summary_ratio": "0.1",
"auto_summarize.max_summary_size": "52428800",
"auto_summarize.max_time": "3600",
"auto_summarize.suspend_period": "24h",
"cron_schedule": "0 0 * * 0",
"defer_scheduled_searchable_idxc": "0",
"disabled": "0",
"dispatch.allow_partial_results": "1",
"dispatch.auto_cancel": "0",
"dispatch.auto_pause": "0",
"dispatch.buckets": "0",
"dispatch.earliest_time": "-1y",
"dispatch.latest_time": "now",
"dispatch.lookups": "1",
"dispatch.max_count": "500000",
"dispatch.max_time": "0",
"dispatch.rate_limit_retry": "0",
"dispatch.reduce_freq": "10",
"dispatch.rt_backfill": "0",
"dispatch.sample_ratio": "1",
"dispatch.spawn_process": "1",
"dispatch.time_format": "%FT%T.%Q%:z",
"dispatch.ttl": "864000",
"dispatchAs": "owner",
"display.events.fields": "[\"host\",\"source\",\"sourcetype\"]",
"display.events.list.drilldown": "full",
"display.events.list.wrap": "1",
"display.events.maxLines": "5",
"display.events.raw.drilldown": "full",
"display.events.rowNumbers": "0",
"display.events.table.drilldown": "1",
"display.events.table.wrap": "1",
"display.events.type": "list",
"display.general.enablePreview": "1",
"display.general.migratedFromViewState": "0",
"display.general.timeRangePicker.show": "1",
"display.general.type": "statistics",
"display.page.search.mode": "smart",
"display.page.search.patterns.sensitivity": "0.8",
"display.page.search.showFields": "1",
"display.page.search.tab": "statistics",
"display.page.search.timeline.format": "compact",
"display.page.search.timeline.scale": "linear",
"display.statistics.drilldown": "cell",
"display.statistics.overlay": "none",
"display.statistics.percentagesRow": "0",
"display.statistics.rowNumbers": "0",
"display.statistics.show": "1",
"display.statistics.totalsRow": "0",
"display.statistics.wrap": "1",
"durable.backfill_type": "auto",
"durable.lag_time": "0",
"durable.max_backfill_intervals": "0",
"is_scheduled": "1",
"is_visible": "1",
"max_concurrent": "1",
"name": "heuristics_report",
"owner": "nobody",
"precalculate_required_fields_for_alerts": "1",
"realtime_schedule": "1",
"request.ui_dispatch_app": "search",
"request.ui_dispatch_view": "search",
"restart_on_searchpeer_add": "1",
"run_n_times": "0",
"run_on_startup": "0",
"schedule_as": "auto",
"schedule_priority": "default",
"schedule_window": "0",
"search": "index=_internal sourcetype=splunkd_ui_access\n    method=GET \"saved/searches\"\n    | eval decodedUri=urldecode(uri_path)\n    | eval accessTimestamp=mvindex(split(uri_query, \"_=\"),1)\n    | eval reportName=mvindex(split(mvindex(split(decodedUri, \"saved/searches\"),1),\"/\"),1)\n    | table user, reportName, accessTimestamp\n    | join left=L right=R where L.reportName = R.title [| rest splunk_server=* /servicesNS/-/-/saved/searches\n    | table title actions eai:acl.app search eai:acl.owner is_scheduled alert.track id author | rename eai:acl.app as app | rename eai:acl.owner as owner\n    | search is_scheduled=1 actions != \"\" alert.track=0 ]\n    | join left=accesslogs right=schedulerlogs type=left where accesslogs.L.reportName = schedulerlogs.savedsearch_name\n    [| search index=_internal sourcetype=scheduler NOT \"action=ssg_mobile_alert\"\n    |  table dispatch_time, savedsearch_name]\n    | eval dispatchTimePlusAday = 'schedulerlogs.dispatch_time' + 86400\n    | eval parsedDispatchTime=strftime('schedulerlogs.dispatch_time',\"%m/%d/%y %H:%M:%S\")\n    | eval dispatchTimePlusADay=strftime(dispatchTimePlusAday,\"%m/%d/%y %H:%M:%S\")\n    | eval parsedAccessTime=strftime(('accesslogs.L.accessTimestamp'/1000) ,\"%m/%d/%y %H:%M:%S\")\n    | eval accessedWithinOneDayofDispatch=if(parsedAccessTime<=dispatchTimePlusADay and parsedAccessTime >=parsedDispatchTime, \"true\", \"false\")",
"sharing": "app",
"skip_scheduled_realtime_idxc": "0"
}
]
